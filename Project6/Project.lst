Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/18/23 23:12:59
:Designing low-level I/O procedures      (Proj6_loyami.asm   Page 1 - 1


				TITLE Designing low-level I/O procedures      (Proj6_loyami.asm)

				; Author: Michelle Loya
				; Last Modified: 2023
				; OSU email address: loyami@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 6                Due Date: 3/19/2023
				; Description: This program will collect user values and display their sum and average
				;			   via low-level I/O procedures and macros

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST

			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays a prompt and moves user input into memory location.
				;
				; Receives: address of text, address of input location, size of input
				; ---------------------------------------------------------------------------------
				mGetString MACRO textOffset:REQ, userInputOffset:REQ, _inputSize:REQ
					PUSH	edx
					PUSH	ecx

				  	mDisplayString textOffset		;displays text

					mov		edx, userInputOffset
					mov		ecx, _inputSize
					call	ReadString

					POP		ecx
					POP		edx
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints a string which is stored in a specified memory location
				;
				; Receives: address of string
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO _textOffset:REQ
					PUSH	edx

				    MOV		edx, _textOffset
					call	WriteString				;displays text

					POP		edx
				ENDM

				;Global Constants:
 = 0000000A			INPUTSIZE = 10
 = 7FFFFFFE			MAX       = 2147483646  ;32-bit signed interger max

 00000000			.data
 00000000 44 65 73 69 67	programTitle	BYTE	"Designing low-level I/O procedures!",13,10,
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 21
	   0D 0A 62 79 20
	   4D 69 63 68 65
	   6C 6C 65 20 4C
	   6F 79 61 0D 0A
	   0D 0A 00
										"by Michelle Loya",13,10,13,10,0
 0000003A 50 6C 65 61 73	introText		BYTE	"Please provide 10 signed decimal integers. Each number needs to be small",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 45 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   6E 65 65 64 73
	   20 74 6F 20 62
	   65 20 73 6D 61
	   6C 6C 0D 0A 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 20 41
	   66 74 65 72 20
	   79 6F 75 20 68
	   61 76 65 20 66
	   69 6E 69 73 68
	   65 64 20 69 6E
	   70 75 74 74 69
	   6E 67 0D 0A 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 2C
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   0D 0A 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 0D 0A 0D 0A
	   00
										"enough to fit inside a 32 bit register. After you have finished inputting",13,10,
										"the raw numbers, I will display a list of the integers, their sum, and their",13,10,
										"average value.",13,10,13,10,0
 00000130 45 6E 74 65 72	promptText		BYTE	"Enter an signed number: ",0
	   20 61 6E 20 73
	   69 67 6E 65 64
	   20 6E 75 6D 62
	   65 72 3A 20 00
 00000149 45 52 52 4F 52	errorText		BYTE	"ERROR: Input does not meet requirements.",13,10,
	   3A 20 49 6E 70
	   75 74 20 64 6F
	   65 73 20 6E 6F
	   74 20 6D 65 65
	   74 20 72 65 71
	   75 69 72 65 6D
	   65 6E 74 73 2E
	   0D 0A 45 6E 74
	   65 72 20 61 20
	   63 6F 72 72 65
	   63 74 65 64 20
	   76 61 6C 75 65
	   3A 20 00
										"Enter a corrected value: ",0
 0000018D 0D 0A 4C 69 73	listText		BYTE	13,10,"List of numbers: ",13,10,0
	   74 20 6F 66 20
	   6E 75 6D 62 65
	   72 73 3A 20 0D
	   0A 00
 000001A3 0D 0A 53 75 6D	sumText			BYTE	13,10,"Sum: ",0
	   3A 20 00
 000001AB 0D 0A 54 72 75	averageText		BYTE	13,10,"Truncated average: ",0
	   6E 63 61 74 65
	   64 20 61 76 65
	   72 61 67 65 3A
	   20 00
 000001C1 0D 0A 0D 0A 47	goodbyeText		BYTE	13,10,13,10,"Goodbye, and thanks for using my program!",13,10,0
	   6F 6F 64 62 79
	   65 2C 20 61 6E
	   64 20 74 68 61
	   6E 6B 73 20 66
	   6F 72 20 75 73
	   69 6E 67 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 21
	   0D 0A 00
 000001F1 2C 20 00		comma			BYTE	", ",0

 000001F4  000000FF [		userInput		BYTE	255 DUP(?)
	    00
	   ]
 000002F3  0000000A [		numberList		SDWORD	INPUTSIZE DUP(?)
	    00000000
	   ]
 0000031B  0000000B [		numberAsString	BYTE	11 DUP(?)
	    00
	   ]

 00000000			.code
 00000000			main PROC
					;1. introduction
 00000000  68 00000000 R		PUSH	OFFSET programTitle
 00000005  68 0000003A R		PUSH	OFFSET introText
 0000000A  E8 000000B8			CALL	introduction

					;2. prompt user for 10 valid values
 0000000F  68 00000130 R		PUSH	OFFSET promptText
 00000014  68 00000149 R		PUSH	OFFSET errorText
 00000019  68 000001F4 R		PUSH	OFFSET userInput
 0000001E  68 000000FF			PUSH	SIZEOF userInput	
					
 00000023  B9 0000000A			MOV		ecx, INPUTSIZE			
 00000028  BF 000002F3 R		MOV		edi, OFFSET numberList

 0000002D			_buildNumberList:
 0000002D  E8 000000B0			CALL	ReadVal
 00000032  89 1F			MOV		[edi], ebx
 00000034  83 C7 04			ADD		edi, 4
 00000037  E2 F4			LOOP    _buildNumberList

					;3. print list of numbers
					mDisplayString	OFFSET listText
 00000039  52		     1		PUSH	edx
 0000003A  BA 0000018D R     1	    MOV		edx, OFFSET listText
 0000003F  E8 00000000 E     1		call	WriteString				;displays text
 00000044  5A		     1		POP		edx
 00000045  68 0000031B R		PUSH			OFFSET numberAsString

 0000004A  B9 0000000A			mov				ecx, INPUTSIZE
 0000004F  BE 000002F3 R		mov				esi, OFFSET numberList

 00000054			_printList:
 00000054  8B 06			mov				eax, [esi]
 00000056  E8 00000134			CALL			WriteVal
 0000005B  83 F9 01			CMP				ecx, 1
 0000005E  76 11			JBE				_printingFinished
					mDisplayString	OFFSET comma
 00000060  52		     1		PUSH	edx
 00000061  BA 000001F1 R     1	    MOV		edx, OFFSET comma
 00000066  E8 00000000 E     1		call	WriteString				;displays text
 0000006B  5A		     1		POP		edx
 0000006C  83 C6 04			ADD				esi, 4
 0000006F  E2 E3			LOOP			_printList
 00000071			_printingFinished:

					;4. calculate and display sum 
					mDisplayString	OFFSET sumText
 00000071  52		     1		PUSH	edx
 00000072  BA 000001A3 R     1	    MOV		edx, OFFSET sumText
 00000077  E8 00000000 E     1		call	WriteString				;displays text
 0000007C  5A		     1		POP		edx
 0000007D  68 0000031B R		PUSH			OFFSET numberAsString

 00000082  B8 00000000			MOV				eax, 0					;eax will holding running sum
 00000087  B9 0000000A			MOV				ecx, INPUTSIZE
 0000008C  BE 000002F3 R		MOV				esi, OFFSET numberList

 00000091			_sum:
 00000091  03 06			ADD		eax, [esi]
 00000093  83 C6 04			ADD		esi, 4
 00000096  E2 F9			LOOP	_sum
 00000098  E8 000000F2			CALL	WriteVal

					;4. calculate and display truncated average
					mDisplayString	OFFSET averageText
 0000009D  52		     1		PUSH	edx
 0000009E  BA 000001AB R     1	    MOV		edx, OFFSET averageText
 000000A3  E8 00000000 E     1		call	WriteString				;displays text
 000000A8  5A		     1		POP		edx
 000000A9  99				CDQ
 000000AA  BB 0000000A			MOV		ebx, INPUTSIZE
 000000AF  F7 FB			IDIV	ebx
 000000B1  E8 000000D9			CALL	WriteVal

					;5. display goodbye message
 000000B6  68 000001C1 R		PUSH	OFFSET goodbyeText
 000000BB  E8 0000011F			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 000000C0  6A 00	   *	    push   +000000000h
 000000C2  E8 00000000 E   *	    call   ExitProcess
 000000C7			main ENDP

				; ***************************************************************
				; Name: introduction
				;
				; Displays title and program introduction
				;
				; Receives: address of programTitle and intro on system stack
				; ***************************************************************
 000000C7			introduction	PROC
 000000C7  55				PUSH    ebp
 000000C8  8B EC			MOV     ebp,esp

					mDisplayString [ebp+12]   	;print programTitle
 000000CA  52		     1		PUSH	edx
 000000CB  8B 55 0C	     1	    MOV		edx, [ebp+12]
 000000CE  E8 00000000 E     1		call	WriteString				;displays text
 000000D3  5A		     1		POP		edx
					mDisplayString [ebp+8]    	;print intro text
 000000D4  52		     1		PUSH	edx
 000000D5  8B 55 08	     1	    MOV		edx, [ebp+8]
 000000D8  E8 00000000 E     1		call	WriteString				;displays text
 000000DD  5A		     1		POP		edx

					;mDisplayString (OFFSET extracredit_1)
					;mDisplayString (OFFSET extracredit_2)

 000000DE  5D				POP		ebp
 000000DF  C2 0008			RET		8
 000000E2			introduction	ENDP

				; ***************************************************************
				; Name: ReadVal
				;
				; Description: Gets user input in the form of a string of digits, 
				;			   converts the string to its numeric representation,
				;			   validates user input, and stores value.
				;
				; Receives: address of promptText in stack		[ebp+24]
				;		    address of errorText in stack		[ebp+20]
				;		    address of userInput in stack		[ebp+16]
				;	     	value of userInput size in stack	[ebp+12]
				;			MAX (global)
				;
				; Returns: ebx (w/ numeric representation of user input)
				; ***************************************************************
 000000E2			ReadVal	PROC
 000000E2  51				PUSH	ecx
 000000E3  55				PUSH    ebp
 000000E4  8B EC			MOV     ebp,esp

					mGetString [ebp+24], [ebp+16], [ebp+12] ;textOffset, inputOffest, inputSize
 000000E6  52		     1		PUSH	edx
 000000E7  51		     1		PUSH	ecx
 000000E8  52		     2		PUSH	edx
 000000E9  8B 55 18	     2	    MOV		edx, [ebp+24]
 000000EC  E8 00000000 E     2		call	WriteString				;displays text
 000000F1  5A		     2		POP		edx
 000000F2  8B 55 10	     1		mov		edx, [ebp+16]
 000000F5  8B 4D 0C	     1		mov		ecx, [ebp+12]
 000000F8  E8 00000000 E     1		call	ReadString
 000000FD  59		     1		POP		ecx
 000000FE  5A		     1		POP		edx
					
 000000FF			_validate:
 000000FF  FC				CLD
 00000100  8B C8			MOV		ecx, eax		;set up counter
 00000102  BB 00000000			MOV		ebx, 0			;set up register to hold user input as integer
 00000107  8B 75 10			MOV		esi, [ebp+16]	;userInput offset moved to esi

					;check if input has a sign value
 0000010A  AC			 	LODSB
 0000010B  49				DEC		ecx
 0000010C  66| 83 F8 2D			CMP		ax, '-'
 00000110  74 32			JE		_negative
 00000112  66| 83 F8 2B			CMP		ax, '+'
 00000116  74 02			JE		_positive

					;input has no sign value, reset to start of string
 00000118  4E				DEC		esi
 00000119  41				INC		ecx

					;---------
					;convert string to integer - will iterate through user input string and will build an integer in
					;ebx if user input string is only composed of characters that represent numbers
					;---------
 0000011A			_positive:
 0000011A  AC			 	LODSB

					;validate that (48d/'0') <= (current character in string) <= (57d/'9')
 0000011B  66| 83 F8 30			CMP		ax, '0'
 0000011F  7C 50			JL		_error
 00000121  66| 83 F8 39			CMP		ax, '9'
 00000125  7F 4A			JG		_error

					;if character is valid number:
 00000127  66| 83 E8 30			SUB		ax, '0'
 0000012B  93				XCHG	eax, ebx
 0000012C  6B C0 0A			IMUL	eax, 10
 0000012F  72 40			JC		_error
 00000131  03 D8			ADD		ebx, eax
 00000133  B8 00000000			MOV		eax, 0
 00000138  E2 E0			LOOP	_positive

					;validate that integer will fit in 32-bit register
 0000013A  81 FB 7FFFFFFE		CMP		ebx, MAX
 00000140  7F 2F			JG		_error
 00000142  EB 2A			JMP		_finish

 00000144			_negative:
 00000144  AC			 	LODSB

					;validate that (48d/'0') <= (current character in string) <= (57d/'9')
 00000145  66| 83 F8 30			CMP		ax, '0'
 00000149  7C 26			JL		_error
 0000014B  66| 83 F8 39			CMP		ax, '9'
 0000014F  7F 20			JG		_error

					;if character is valid number:
 00000151  66| 83 E8 30			SUB		ax, '0'
 00000155  93				XCHG	eax, ebx
 00000156  6B C0 0A			IMUL	eax, 10
 00000159  72 16			JC		_error
 0000015B  03 D8			ADD		ebx, eax
 0000015D  B8 00000000			MOV		eax, 0
 00000162  E2 E0			LOOP	_negative

					;validate that integer will fit in 32-bit register
 00000164  81 FB 7FFFFFFE		CMP		ebx, MAX
 0000016A  7F 05			JG		_error

					;negate integer
 0000016C  F7 DB			NEG		ebx

 0000016E			_finish:
 0000016E  5D				POP		ebp
 0000016F  59				POP		ecx
 00000170  C3				RET		

					;request new value from user if user input does not meet requirements
 00000171			_error:
					mGetString [ebp+20], [ebp+16], [ebp+12]
 00000171  52		     1		PUSH	edx
 00000172  51		     1		PUSH	ecx
 00000173  52		     2		PUSH	edx
 00000174  8B 55 14	     2	    MOV		edx, [ebp+20]
 00000177  E8 00000000 E     2		call	WriteString				;displays text
 0000017C  5A		     2		POP		edx
 0000017D  8B 55 10	     1		mov		edx, [ebp+16]
 00000180  8B 4D 0C	     1		mov		ecx, [ebp+12]
 00000183  E8 00000000 E     1		call	ReadString
 00000188  59		     1		POP		ecx
 00000189  5A		     1		POP		edx
 0000018A  E9 FFFFFF70			JMP		_validate

				   
 0000018F			ReadVal	ENDP

				; ***************************************************************
				; Name: WriteVal
				;
				; Description: Converts a numeric value into a string value and 
				;			   prints the string.
				;
				; Preconditions: eax register must contain numberic value
				;
				; Receives: address of numberAsString in stack	[ebp+16]
				;		    address of errorText in stack		[ebp+20]
				;
				; Returns:	numberAsString (string representation of integer)
				; ***************************************************************
 0000018F			WriteVal	PROC
 0000018F  50				PUSH	eax
 00000190  51				PUSH	ecx
 00000191  55				PUSH    ebp
 00000192  8B EC			MOV     ebp,esp

 00000194  99				CDQ
 00000195  BA 00000000			MOV		edx, 0
 0000019A  B9 00000000			MOV		ecx, 0
 0000019F  BB 0000000A			MOV		ebx, 10
 000001A4  8B 7D 10			MOV		edi, [ebp+16]

 000001A7  83 F8 00			CMP EAX, 0
 000001AA  7C 25			JL _negative					;will redirect number to have negative sign added

					;----
					;separate a number into individual numbers through division by popping the modulo
					;(or what is rightmost number) onto the stack until all digits are separated and on 
					;the stack. Then pop each number as a char onto numberAsString array
					;----
 000001AC			_loop:
 000001AC  F7 FB			IDIV	ebx
 000001AE  52				PUSH	edx
 000001AF  BA 00000000			MOV		edx, 0
 000001B4  41				INC		ecx
 000001B5  83 F8 00			CMP		eax, 0
 000001B8  7F F2			JG		_loop

 000001BA			_buildNumberList:
 000001BA  58				POP		eax
 000001BB  83 C0 30			ADD		eax, '0'				;convert to ASCII
 000001BE  89 07			MOV		[edi], eax
 000001C0  47				INC		edi
 000001C1  E2 F7			LOOP    _buildNumberList

					mDisplayString [ebp+16]
 000001C3  52		     1		PUSH	edx
 000001C4  8B 55 10	     1	    MOV		edx, [ebp+16]
 000001C7  E8 00000000 E     1		call	WriteString				;displays text
 000001CC  5A		     1		POP		edx

 000001CD  5D				POP		ebp
 000001CE  59				POP		ecx
 000001CF  58				POP		eax
 000001D0  C3				RET		

 000001D1			_negative:
 000001D1  53				PUSH	ebx
 000001D2  F7 D8			NEG		eax
 000001D4  BB 0000002D			MOV		ebx, '-'
 000001D9  89 1F			MOV		[edi], ebx				;add negative sign '-' 
 000001DB  47				INC		edi
 000001DC  5B				POP		ebx
 000001DD  EB CD			JMP		_loop	

 000001DF			WriteVal	ENDP

				; ***************************************************************
				; Name: farewell
				;
				; Displays farewell to user
				;
				; Receives: address for goodbye text on stack
				; ***************************************************************
 000001DF			farewell		PROC
 000001DF  55				PUSH    ebp
 000001E0  8B EC			MOV     ebp,esp
					mDisplayString [ebp+8]    	;print goodbye text
 000001E2  52		     1		PUSH	edx
 000001E3  8B 55 08	     1	    MOV		edx, [ebp+8]
 000001E6  E8 00000000 E     1		call	WriteString				;displays text
 000001EB  5A		     1		POP		edx
 000001EC  5D				POP		ebp
 000001ED  C2 0008			RET		8
 000001F0			farewell		ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/18/23 23:12:59
:Designing low-level I/O procedures      (Proj6_loyami.asm   Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000326 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E2 _TEXT	Length= 000000AD Public STDCALL
  _validate  . . . . . . . . . .	L Near	 000000FF _TEXT	
  _positive  . . . . . . . . . .	L Near	 0000011A _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000144 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 0000016E _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000171 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000018F _TEXT	Length= 00000050 Public STDCALL
  _loop  . . . . . . . . . . . .	L Near	 000001AC _TEXT	
  _buildNumberList . . . . . . .	L Near	 000001BA _TEXT	
  _negative  . . . . . . . . . .	L Near	 000001D1 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 000001DF _TEXT	Length= 00000011 Public STDCALL
introduction . . . . . . . . . .	P Near	 000000C7 _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C7 Public STDCALL
  _buildNumberList . . . . . . .	L Near	 0000002D _TEXT	
  _printList . . . . . . . . . .	L Near	 00000054 _TEXT	
  _printingFinished  . . . . . .	L Near	 00000071 _TEXT	
  _sum . . . . . . . . . . . . .	L Near	 00000091 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUTSIZE  . . . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Number	 7FFFFFFEh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averageText  . . . . . . . . . .	Byte	 000001AB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 000001F1 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorText  . . . . . . . . . . .	Byte	 00000149 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeText  . . . . . . . . . .	Byte	 000001C1 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
introText  . . . . . . . . . . .	Byte	 0000003A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listText . . . . . . . . . . . .	Byte	 0000018D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numberAsString . . . . . . . . .	Byte	 0000031B _DATA	
numberList . . . . . . . . . . .	DWord	 000002F3 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
promptText . . . . . . . . . . .	Byte	 00000130 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumText  . . . . . . . . . . . .	Byte	 000001A3 _DATA	
userInput  . . . . . . . . . . .	Byte	 000001F4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
